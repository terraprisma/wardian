--- decompiled/TerrariaUnified/ReLogic/Utilities/SlotId.cs
+++ decompiled/Wardian/ReLogic/Utilities/SlotId.cs
@@ -1,40 +_,37 @@
+using System.Runtime.CompilerServices;
+
+// TODO: (Minor) summaries.
+
 namespace ReLogic.Utilities;
 
-public struct SlotId
+/// <summary>
+///		TODO; <see cref="SlotVector{T}"/>.
+/// </summary>
+public readonly struct SlotId
 {
-	public static readonly SlotId Invalid = new SlotId(65535u);
+	public static readonly SlotId INVALID = new(KEY_INC);
 
 	private const uint KEY_INC = 65536u;
-
-	private const uint INDEX_MASK = 65535u;
-
-	private const uint ACTIVE_MASK = 2147483648u;
-
-	private const uint KEY_MASK = 2147418112u;
+	private const uint INDEX_MASK = 0x0000FFFF;
+	private const uint ACTIVE_MASK = 0x80000000;
+	private const uint KEY_MASK = 0x7FFF0000;
+
+	public readonly bool IsValid => (Value & INDEX_MASK) != INDEX_MASK;
+
+	internal readonly bool IsActive => (Value & ACTIVE_MASK) != 0 && IsValid;
+
+	internal readonly uint Index => Value & INDEX_MASK;
+
+	internal readonly uint Key => Value & KEY_MASK;
 
 	public readonly uint Value;
 
-	public bool IsValid => (Value & 0xFFFF) != 65535;
-
-	internal bool IsActive {
-		get {
-			if ((Value & 0x80000000u) != 0) {
-				return IsValid;
-			}
-			return false;
-		}
-	}
-
-	internal uint Index => Value & 0xFFFFu;
-
-	internal uint Key => Value & 0x7FFF0000u;
-
-	internal SlotId ToInactive(uint freeHead)
+	internal readonly SlotId ToInactive(uint freeHead)
 	{
 		return new SlotId(Key | freeHead);
 	}
 
-	internal SlotId ToActive(uint index)
+	internal readonly SlotId ToActive(uint index)
 	{
 		uint num = 0x7FFF0000u & (Key + 65536);
 		return new SlotId(0x80000000u | num | index);
@@ -47,10 +_,7 @@
 
 	public override bool Equals(object obj)
 	{
-		if (!(obj is SlotId)) {
-			return false;
-		}
-		return ((SlotId)obj).Value == Value;
+		return obj is SlotId id && id.Value == Value;
 	}
 
 	public override int GetHashCode()
@@ -58,23 +_,24 @@
 		return Value.GetHashCode();
 	}
 
-	public static bool operator ==(SlotId lhs, SlotId rhs)
+	public static bool operator ==(SlotId left, SlotId right)
 	{
-		return lhs.Value == rhs.Value;
+		return left.Value == right.Value;
 	}
 
-	public static bool operator !=(SlotId lhs, SlotId rhs)
+	public static bool operator !=(SlotId left, SlotId right)
 	{
-		return lhs.Value != rhs.Value;
+		return !(left == right);
 	}
 
 	public float ToFloat()
 	{
-		return ReinterpretCast.UIntAsFloat(Value);
+		uint value = Value;
+		return Unsafe.As<uint, float>(ref value);
 	}
 
 	public static SlotId FromFloat(float value)
 	{
-		return new SlotId(ReinterpretCast.FloatAsUInt(value));
+		return new SlotId(Unsafe.As<float, uint>(ref value));
 	}
 }
