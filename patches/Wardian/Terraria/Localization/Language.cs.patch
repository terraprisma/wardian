--- decompiled/TerrariaUnified/Terraria/Localization/Language.cs
+++ decompiled/Wardian/Terraria/Localization/Language.cs
@@ -1,74 +_,57 @@
 using System.Text.RegularExpressions;
 using Terraria.Utilities;
 
+// TODO: (Minor) summaries.
+
 namespace Terraria.Localization;
 
+/// <summary>
+///		Shorthands to various <see cref="LanguageManager"/> methods through the <see cref="LanguageManager.INSTANCE"/> singleton.
+/// </summary>
 public static class Language
 {
+	/// <summary>
+	///		The current, active <see cref="GameCulture"/>.
+	/// </summary>
-	public static GameCulture ActiveCulture => LanguageManager.Instance.ActiveCulture;
+	public static GameCulture ActiveCulture => LanguageManager.INSTANCE.ActiveCulture;
 
 	public static LocalizedText GetText(string key)
 	{
-		return LanguageManager.Instance.GetText(key);
+		return LanguageManager.INSTANCE.GetText(key);
-	}
-
-	public static string GetTextValue(string key)
-	{
-		return LanguageManager.Instance.GetTextValue(key);
-	}
-
-	public static string GetTextValue(string key, object arg0)
-	{
-		return LanguageManager.Instance.GetTextValue(key, arg0);
-	}
-
-	public static string GetTextValue(string key, object arg0, object arg1)
-	{
-		return LanguageManager.Instance.GetTextValue(key, arg0, arg1);
-	}
-
-	public static string GetTextValue(string key, object arg0, object arg1, object arg2)
-	{
-		return LanguageManager.Instance.GetTextValue(key, arg0, arg1, arg2);
 	}
 
 	public static string GetTextValue(string key, params object[] args)
 	{
-		return LanguageManager.Instance.GetTextValue(key, args);
+		return LanguageManager.INSTANCE.GetTextValue(key, args);
 	}
 
 	public static string GetTextValueWith(string key, object obj)
 	{
-		return LanguageManager.Instance.GetText(key).FormatWith(obj);
+		return LanguageManager.INSTANCE.GetText(key).FormatWith(obj);
 	}
 
 	public static bool Exists(string key)
 	{
-		return LanguageManager.Instance.Exists(key);
+		return LanguageManager.INSTANCE.Exists(key);
 	}
 
 	public static int GetCategorySize(string key)
 	{
-		return LanguageManager.Instance.GetCategorySize(key);
+		return LanguageManager.INSTANCE.GetCategorySize(key);
-	}
-
-	public static LocalizedText[] FindAll(Regex regex)
-	{
-		return LanguageManager.Instance.FindAll(regex);
 	}
 
 	public static LocalizedText[] FindAll(LanguageSearchFilter filter)
 	{
-		return LanguageManager.Instance.FindAll(filter);
+		return LanguageManager.INSTANCE.FindAll(filter);
 	}
 
 	public static LocalizedText SelectRandom(LanguageSearchFilter filter, UnifiedRandom random = null)
 	{
-		return LanguageManager.Instance.SelectRandom(filter, random);
+		return LanguageManager.INSTANCE.SelectRandom(filter, random);
 	}
 
 	public static LocalizedText RandomFromCategory(string categoryName, UnifiedRandom random = null)
 	{
-		return LanguageManager.Instance.RandomFromCategory(categoryName, random);
+		return LanguageManager.INSTANCE.RandomFromCategory(categoryName, random);
 	}
 }
